// Code generated by protoc-gen-go-test. DO NOT EDIT.

package main

import (
	"github.com/gotomicro/ego/server/egrpc"
	"testing"
	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc/test/bufconn"
	"google.golang.org/protobuf/proto"
	cegrpc "github.com/gotomicro/ego/client/egrpc"
	"net"
	"context"
	"google.golang.org/grpc"
	helloworld "github.com/gotomicro/ego/examples/helloworld"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the ego package it is being compiled against.

var svc *egrpc.Component

func init() {
}

func bufDialer(context.Context, string) (net.Conn, error) {
	return svc.Listener().(*bufconn.Listener).Dial()
}

func TestSayHello(t *testing.T) {
	cli := helloworld.NewGreeterClient(cegrpc.DefaultContainer().Build(cegrpc.WithDialOption(grpc.WithContextDialer(bufDialer))).ClientConn)
	ctx := context.Background()
	req := &helloworld.HelloRequest{}

	wantRes := &helloworld.HelloResponse{}
	res, err := cli.SayHello(ctx, req)
	assert.NoError(t, err)
	assert.NotNil(t, res)
	assert.True(t, proto.Equal(wantRes, res))
	t.Logf("res: %+v", res)
}

func TestSayHelloUnary2Stream(t *testing.T) {
	cli := helloworld.NewGreeterClient(cegrpc.DefaultContainer().Build(cegrpc.WithDialOption(grpc.WithContextDialer(bufDialer))).ClientConn)
	ctx := context.Background()
	req := &helloworld.HelloRequest{}

	stream, err := cli.SayHelloUnary2Stream(ctx, req)
	wantRes := &helloworld.HelloResponse{}
	res, err := stream.Recv()
	assert.NoError(t, err)

	assert.NoError(t, err)
	assert.NotNil(t, res)
	assert.True(t, proto.Equal(wantRes, res))
	t.Logf("res: %+v", res)
}

func TestSayHelloStream2Unary(t *testing.T) {
	cli := helloworld.NewGreeterClient(cegrpc.DefaultContainer().Build(cegrpc.WithDialOption(grpc.WithContextDialer(bufDialer))).ClientConn)
	ctx := context.Background()

	stream, err := cli.SayHelloStream2Unary(ctx)
	assert.NoError(t, err)

	req := &helloworld.HelloRequest{}
	err = stream.Send(req)
	assert.NoError(t, err)

	wantRes := &helloworld.HelloResponse{}
	res, err := stream.CloseAndRecv()
	assert.NoError(t, err)
	assert.Equal(t, res, nil)
	assert.True(t, proto.Equal(wantRes, res))
	t.Logf("res: %+v", res)
}

func TestSayHelloStream2Stream(t *testing.T) {
	cli := helloworld.NewGreeterClient(cegrpc.DefaultContainer().Build(cegrpc.WithDialOption(grpc.WithContextDialer(bufDialer))).ClientConn)
	ctx := context.Background()
	req := &helloworld.HelloRequest{}

	stream, err := cli.SayHelloStream2Stream(ctx)
	assert.NoError(t, err)
	err = stream.Send(req)
	assert.NoError(t, err)

	wantRes := &helloworld.HelloResponse{}
	res, err := stream.Recv()
	assert.NoError(t, err)
	assert.NotNil(t, res)
	assert.True(t, proto.Equal(wantRes, res))
	t.Logf("res: %+v", res)
}
